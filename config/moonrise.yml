# This is the configuration file for Moonrise.
#
# Each configuration option is prefixed with a comment to explain what it does. Additional changes to this file
# other than modifying the options, such as adding comments, will be overwritten when Moonrise loads the config.
#
# Below are the Moonrise startup flags. Note that startup flags must be placed in the JVM arguments, not
# program arguments.
# -DMoonrise.ConfigFile=<file> - Override the config file location. Might be useful for multiple game versions.
# -DMoonrise.WorkerThreadCount=<number> - Override the auto configured worker thread counts (worker-threads).
# -DMoonrise.MaxViewDistance=<number> - Overrides the maximum view distance, should only use for debugging purposes.

bug-fixes:
  # Fixes https://bugs.mojang.com/browse/MC-159283. This fixes a bug resulting in the end islands
  # not properly generating at far enough distances in the end. Note that toggling this config option
  # will not affect already generated areas.
  # This configuration has two options:
  # true    -> Fixes the end islands generation. This is different from Vanilla behavior.
  # false   -> Does not fix the end islands generation. This is the same behavior as Vanilla.
  fix-MC-159283: false
  # Fixes https://bugs.mojang.com/browse/MC-224294. By avoiding double ticking lava blocks during
  # chunk random ticking, the cost of world random ticking is significantly reduced.
  # This configuration has two options:
  # true    -> Does not double tick lava. This is different from Vanilla behavior.
  # false   -> Does double tick lava. This is the same behavior as Vanilla.
  fix-MC-224294: true
chunk-loading:
  # Advanced configuration options for player chunk loading. You shouldn't be touching these
  # unless you have a reason.
  advanced:
    # Whether to avoid sending chunks to players who have a view distance
    # configured lower than the server's.
    auto-config-send-distance: true
    # The maximum amount of pending chunk generations per player. If
    # this value is 0, then the player chunk loader will automatically determine a value. If
    # this value is less-than 0, then there is no limit.
    #
    # This value should be used to tune the saturation of the chunk system.
    player-max-concurrent-chunk-generates: 0
    # The maximum amount of pending chunk loads per player. If
    # this value is 0, then the player chunk loader will automatically determine a value. If
    # this value is less-than 0, then there is no limit.
    #
    # This value should be used to tune the saturation of the chunk system.
    player-max-concurrent-chunk-loads: 0
  # Chunk loading/generation/sending rate targets for the chunk system.  These values are the
  # maximum rates at which the player chunk loader will attempt to load/generate/send chunks to
  # players. Actual resulting rates will depend on hardware.
  basic:
    # The delay before chunks are unloaded around players once they leave their view distance.
    # The Vanilla value is 0 ticks. Setting this value higher (i.e 5s) will allow pets to teleport
    # to their owners when they teleport.
    player-chunk-unload-delay: 0t
    # The maximum rate of chunks to generate for given player, per second. If this value is <= 0,
    # then there is no rate limit.
    player-max-gen-rate: -1.0
    # The maximum rate of chunks to load from disk for any given player, per second. If this value is <= 0,
    # then there is no rate limit.
    player-max-load-rate: -1.0
    # The maximum rate of chunks to send to any given player, per second. If this value is <= 0,
    # then there is no rate limit.
    player-max-send-rate: -1.0
chunk-saving:
  # The interval at which chunks should be incrementally autosaved.
  auto-save-interval: 5m
  # The maximum number of chunks to incrementally autosave each tick. If
  # the value is <= 0, then no chunks will be incrementally saved.
  max-auto-save-chunks-per-tick: 12
chunk-system: { }
misc: { }
tick-loop:
  # Configures the maximum number of ticks the server will attempt to catch up on.
  # The server will attempt to catch up by "sprinting." This is visually apparent by
  # watching mobs move/attack quickly after the server lags.
  #
  # If the server falls behind by 10 ticks and the configured value is 5, then the server
  # will only attempt to catch up by 5 ticks.
  #
  # Tick catchup exists so that temporary spikes in server lag do not cause the server time
  # to fall behind wall time over a long period. However, the speedup caused by the catchup
  # process may be disruptive to players.
  #
  # The default value is set to 5 so that players are not unnecessarily disrupted if the server
  # happens to lag for any reason, and so that small lag spikes do not cause de-sync from wall
  # time. Note that this value is smaller than Vanilla, which is at least 20 ticks.
  #
  # To disable tick catchup, set the configured value to 1.
  catchup-ticks: default
# Do not change, used internally.
version: 1
# Configuration options which control the behavior of the common threadpool workers.
worker-pool:
  # Set the number of threads dedicated to RegionFile I/O operations.
  # If the value is <= 0, then the number of threads used is 1. Configuring
  # a higher value than 1 is only recommended on SSDs (HDDs scale negatively)
  # and when you have determined that I/O is the bottleneck for chunk loading/saving.
  io-threads: 8
  # Set the number of shared worker threads to be used by chunk rendering,
  # chunk loading, chunk generation. If the value is <= 0, then the number
  # of threads will automatically be determined.
  worker-threads: 4
